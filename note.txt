publicKey : khi được generate bởi thuật toán bất đối xưng
    -> key đang dưới dạng Buffer (chưa được hash)
    => phải chuyển về string

Khi đoạn code bị lặp 2 lần trở lên => phải chuyển đổi viết Utils.

== Authetication ==
+) x-api-key    : phân quyền và cho phép truy cập vào hệ thống.
+) x-client-id  : Who ?
+) authorization: chìa khóa - accessToken
    x-api-key -> apiKey -> permission 
    x-client-id ? -> User -> KeyStore
    authorization -> accessToken            => JWT.verify(accessToken, KeyStore.publicKey)

== Request ==
+) keyStore
+) user {userId, email}
+) refreshToken
+) shopId <=> userId

1. Tạo ra "key-permission" trước.
    +) Key          : đại diện cho mỗi 1 Shop.
    +) permission   : quyền hạn đối với Account.

2. Gán "key-permission" vào Headers - khi tạo Account cho Shop/Doanh nghiệp.
    -> Create Account

3. Login.
    +) Mỗi lần login -> tạo ra 1 "refreshToken mới" và save refreshToken cũ vào refreshTokensUsed (đã sử dụng)


checkout - review -> truoc khi 'order' (dat hang : reservation)

Ton kho qua ban -> su dung acquireProduct - khoa lac quan

Order :
    1 - checkout review -> success
    2 - create 'key' for req -> update inventory_reservation
        (ai nắm giữ 'key' - được thực thi các công đoạn sau đó)
    3 - create new order
    4 - remove product in cart


*) Đối với hệ thống lớn, việc 'Delete' không nên đánh dấu -> mà nên đẩy hẳn sang 1 DB khác.

RabbitMQ: 
    1. Connect RMQ và tạo channel.
    2. Khai báo Exchange và Queue.
    3. Binding với 2 params : Exchange -> Queue
    4. Send Message : channel.sendToQueue(...)
    5. Recived Message : channel.consume(...)


Thư rác: hộp thư chết - Áp dụng DLX
    - Những Job ko được xử lí bị lỗi
    - Những Job mấy quá nhiều thời gian (TTL)
    - Những Job ko vào được Queue       (limited queue) 


keywords:
    + durable : true -> đảm bảo 'message' ko bị mất khi hệ thống dead.  (save to disk)
    + noAck : false -> nhận 'tín hiệu' xác nhận, khi 1 task vụ xử  lí thành công.
    + deadLetterExchange : nơi tiếp nhận các 'message' bị lỗi.
    + deadLetterRoutingKey : định tuyến nơi đến của các 'message' bị lỗi.
    + channel.nack(...) : thừa nhận 'lỗi' - và đẩy 'message' bị lỗi tới Hotfix
    + channel.prefetch(1) : đảm bảo tính tuần tự của 'message' khi xử lí (giống transactions)


*) Scale bài toán 'Notification': toàn bộ Notif sẽ đẩy vào Message Queue.
    1. Đo lường thói quen User.
    2. Đối với User tương tác nhiều -> thì nên push.
    3. Đối với User ít hoạt động -> thì nên pull - khi User login vào hệ thống.

*) Bài toán Nested : ứng dụng cho 'Comment'
    - Áp dụng kiểu cây và đánh số  trái - phải

== Setup MySQL Master & Slave ==
1. tạo container: chạy trên cùng 1 network 'my_master_slave_mysql'
    + docker run -d --name mysql8-master --network my_master_slave_mysql -p 8811:3306 -e MYSQL_ROOT_PASSWORD=tipjs mysql:8.0
    + docker run -d --name mysql8-slave --network my_master_slave_mysql -p 8822:3306 -e MYSQL_ROOT_PASSWORD=tipjs mysql:8.0

2. Sửa đổi config (/etc/my.cnf) :
    2.1 chỉnh sửa file dưới local: copy file my.cnf từ container về  local -> edit. (log_bin=mysql-bin | server-id=1 | server-id=2)
    2.2 sau khi edit -> đẩy chèn trở lại docker container.

3. Setup Slave đồng bộ Data với Master:
    - Từ Slave cấu hình đồng bộ data với Master
        docker exec -it mysql8-slave bash
        mysql -uroot -p
        > START SLAVE;
            CHANGE MASTER TO    (set thông tin Master - để đồng bộ)
            MASTER_HOST='172.19.0.2',
            MASTER_PORT=3306,
            MASTER_USER='root',
            MASTER_PASSWORD='tipjs',
            master_log_file='mysql-bin.000001',     (check 'show master status' - bên db Master)
            master_log_pos=366,                     (check 'show master status' - bên db Master)
            master_connect_retry=60,
            GET_MASTER_PUBLIC_KEY=1;

        > SHOW SLAVE STATUS/G; (check 2 field 'Slave_IO_Running' và 'Slave_SQL_Running')
            Slave_IO_Running: Yes
            Slave_SQL_Running: Yes

=> Connect đồng bộ dữ liệu giữa Master và Slave.


=== CreatePool - tăng tốc ghi cả triệu record nhanh gấp hàng chục lần ===
NodeJS cung cấp lib mysql2.createPool -> giúp cho việc import triệu record nhanh chóng.

== Partition ==
- Phân vùng dữ liệu : chia dữ liệu thành các vùng - dễ dàng quản lí và truy xuất.
    + Tránh Select * from <Table> , mà ko có 1 điều kiện nào -> hệ thống sẽ scan toàn bộ -> partition ko thực thi ở đây.
    + Luôn phải có 'điều kiện' với phạm vi của Partition - để  hệ thống truy xuất cho nhanh.

- Tự động phân vùng dữ liệu:
    1. Viết Procedure - hàm định nghĩa cách hệ thống hoạt động tạo tự động Partition.
    2. Tạo Event - set Cronjob định kì mỗi tháng chạy 1 lần -> để tạo tự động partition.

== Đánh INDEX ==
Lưu ý: đặc biệt đối với việc đánh chỉ mục tổ hợp composite.
    - Thuộc tính ngoài cùng bên trái là mốc chỉ mục tổ hợp.
        -> Muốn thực thi câu lệnh có thực hiện index chỉ mục tổng hợp, thì bắt buộc phải có thuộc tính ngoài cùng bên trái trong câu điều kiện.

    +) các thuộc tính còn lại (ngoài chỉ mục ngoài cùng bên trái) trong chỉ mục tổng hợp,
     muốn thực thi đc idx thì câu lệnh SELECT chỉ đc lấy trong các trường nằm trong chỉ mục tổ hợp,
     còn không sẽ ko thực thi idx.

- Mệnh đề  AND:
    Nếu kết hợp chỉ mục tổ hợp và chỉ mục khác -> câu lệnh thực thi sẽ không áp dụng với bất kì chỉ mục nào.


- Mệnh để OR:
    Nếu kết hợp OR giữa các chỉ mục với nhau -> câu lệnh thực thi với chỉ mục tổ hợp của các chỉ mục trên.



keywords: tìm hiểu 
    + aggregate(...)
    + $unwind
    + $lookup
    + $project


LOGS : use package 'Winston'
    ? Nếu ghi quá nhiều logs - dung lượng quá nhiều.
    -> Giải pháp : dùng package 'winston-daily-rotate-file'
        +) xét 'maxSize' cho dung lượng file -> vượt quá chia sang file khác.
        +) xét 'maxFiles' thời gian tồn tại của file Log -> quá hạn file log bị xóa.
        +) zippedArchive: true  - nén file log và save trước khi xóa file.
    ? Quản lí log - theo ngày/tháng/năm giờ/phút/giây -> format
    ? Logs : giúp hệ thống xác định vấn đề  và là công cụ mạnh mẽ để giải quyết các tranh cãi đổ  lỗi cho nhau.

    - requestId: đại diện cho tiến trình process của User tương tác với hệ thống.

    - Các bước ghi Logs:
        1. descript
        2. nếu error -> ghi log
        3. research  -> result của request đó.

    - Các cấp độ logs: error -> warning -> debug -> info -> requestId or traceId
        + error : các lỗi nghiêm trọng, ảnh hưởng đến hệ thống.
        + warning : cảnh báo các lỗi chung, ít ảnh hưởng đến doanh nghiệp.
        + debug : phát triển dữ liệu chạy trong Logic chính.
        + info : ghi lại các thông tin quan trọng để khắc phục sự cố.
        + requestId : thông tin chi tiết nhất, thông thường ghi vào file log.
    => vì "error" là cấp độ cao nhất nên mọi cấp độ khác đều phải chứa log 'error'

     
SPU (Standard Product Unit) : đơn vị sản phẩm tiêu chuẩn.   (= 1NF)
    +) Iphone   - Apple
    +) Giày     - Adidas
    +) Áo Thun  - Levi's

SKU : kết hợp của các giá trị thuộc tính khác nhau trong SPU    
    (có thể  coi là các record trong table - SPU)

==> 1 SPU = N SKU ::: SKU là đơn vị nhỏ nhất trong hệ thống -> đại diện cho 1 Object cụ thể.

/spu/new ::: req.body {
    "product_name" : "Name 1",
    "product_thumb" : "<link_image>",
    "product_description": "Mô tả sản phẩm",
    "product_price": 111.000,
    "product_quantity": 23,
    "product_category": [100001, 100002, 100003],
    "product_attributes": [{
        "attribute_id": 200005,
        "attribute_values": [
            { "value_id": 1 },
            { "value_id": 2 }
        ]
    }],
    "product_variations": [
        {
            "images": [],
            "name": "color",
            "options": ["red", "green"]     // [0, 1]
        },
        {
            "images": [],
            "name": "size",
            "options": ["S", "M"]           // [0, 1]
        }
    ],
    "sku_list": [
        {
            "sku_tier_idx": [0, 0],         // red - S
            "sku_price": "1000",
            "sku_stock": 10
        },
        {
            "sku_tier_idx": [0, 1],         // red - M
            "sku_price": "1001",
            "sku_stock": 11
        },
        {
            "sku_tier_idx": [1, 0],         // green - S
            "sku_price": "1002",
            "sku_stock": 12
        },
        {
            "sku_tier_idx": [1, 1],         // green - M
            "sku_price": "1003",
            "sku_stock": 13
        }
    ]
}

KeyCDN : Content delivery network   -> test tốc độ phản hồi của mỗi khu vực 'region'.

=== AWS ===

policies: chinh sach
	- xét quyền hạn cho user truy cập vào tài nguyên (resource)

cloudfront :  phân phối tài nguyên tới nhiều vùng 'region' khác nhau.
	
	
Ex :
	1. Tạo resource với S3	: demo-s3
	2. Tạo policy cho 'demo-s3'	: policy-demo-s3
		(get/put/delete object)
	3. Tạo User 			: user-demo-bucket-s3
		(cho phép dùng tài nguyên s3)
		+) Attach policy 'policy-demo-s3'
		
		+) Create access key -> third-party services
			=> ACCESS_KEY && SECRET_KEY
	4. use 'aws-sdk' tương tác với hệ thống.

    5. cloudfront - create distribution
        +) select resource ở Origin domain. (chia sẻ tài nguyên)
        +) Origin access -> Legacy access identities -> create OAI (Origin access identity) -> Yes, update the bucket policy
        => Thay thế  : url_image_s3 = Distribution domain name => access Image and up speed res on regions.


    6. Security: setup 'key group' trong cloudfront.
        +) cd folder 'src/keys' (nơi chứa key)
        +) openssl version
        +) openssl genrsa -out private_key.pem 2048                     (KEY Private)
            (Server giữ KEY_PRIVATE)
        
        +) openssl rsa -pubout -in private_key.pem -out public_key.pem  (KEY Public)
            (Cloudfront giữ KEY_PUBLIC)

        6.1 Create "public key" in cloudfront - với content của KEY_PUBLIC
        6.2 Create "key group"  = add public key.
        6.3 Edit Instance - cloudfront distribution.
            - cloudfront -> behaviors -> select item -> Edit behavior -> Restrict viewer access : YES -> Trusted key groups (recommended) -> Add key groups -> Save Change
